!(import! &self motto)

(= (doc data_struct)
   (Doc
    (description "some data description. all values, except proper names (e.g. John, Arilou, New York, Arizona), must be lower case")
    (type "object")
    (properties
        (type_of
            (description "is it statement or question")
            (enum is_array statement question)
            (type "string")
        )
        (quantifier
            (description "Used when the subject is a general class or group rather than a specific individual. (e.g. 'any', 'all', etc., or none) , not empty")
            (type "string")
            (default "none")
        )
        (subject
            (description "The entity performing or being described in the sentence. This is typically a proper noun  (e.g., 'Sam'). Does not include articles and quantifiers.")
            (type "string")
            (default "none")
        )
        (subject_class
            (description "The category or class that the subject belongs to when using a quantifier.  (e.g., alien)")
            (type "string")
            (default "none")
        )
        (copula_or_verb
            (description "The action or relation the subject has with the object, or the linking verb used for identification or classification. (e.g., 'is', 'eats'). Do not include negation, we have separate field for it")
            (type "string")
            (default "none")
        )
        (object
            (description "The target of the copula or predicate â€” what the subject is or interacts with. (e.g., 'helicopter')")
            (type "string")
            (default "none")
        )
        (object_class
            (description "the same as object but without an article ('a', 'the', 'an') (e.g., 'helicopter')")
            (type "string")
            (default "none")
        )
        (negation
            (type "string")
            (description "true if negation is present")
            (default "none")
            (enum is_array true false)
        )
    )
    (type "object")
  )
)


;(: response (-> Atom))
(= (response)
   (let* (($dict_expr ((langhcian-llm-agent) (messages) (OutputStructure data_struct)))
          ($dict_space (dict-to-metta $dict_expr)))
    (case (match $dict_space (, ("type_of" "statement") ("quantifier" "none") ("subject" $x)
            ("copula_or_verb" "is")  ("object_class" $y) ("negation" $neg)) ($x $y $neg))
          (
            ;'X is Y'
            (($x $y "false")
             (let $val (remove-quotes $y True)
                (quote (= ($val $x ) True)))
            )
            ;'X is not Y'
            (($x $y "true")
             (let $val (remove-quotes $y True)
                (quote  (= ($val $x ) False)))
            )
            (Empty
             ; 'any/all X is Y' and 'any/all X is not Y'
             (case (match $dict_space (, ("type_of" "statement") ("quantifier" $q) ("subject" $x) ("copula_or_verb" $predicate)
                     ("object_class" $y) ("negation" $neg)) ($x $y $predicate $q $neg))
                (
                    (($x $y "is" "any" "true")
                        (let* (($x1 (remove-quotes $x True)) ($y1 (remove-quotes $y True)))
                            (quote (= ($x1 $z) (not ($y1 $z))))
                        )
                    )
                    (($x $y "are" "all" "true")
                        (let* (($x1 (remove-quotes $x True)) ($y1 (remove-quotes $y True)))
                            (quote (= ($x1 $z) (not ($y1 $z))))
                        )
                    )
                    (($x $y "is" "any" "false")
                        (let* (($x1 (remove-quotes $x True)) ($y1 (remove-quotes $y True)))
                            (quote (= ($x1 $z) ($y1 $z)))
                        )
                    )
                    (($x $y "are" "all" "false")
                        (let* (($x1 (remove-quotes $x True)) ($y1 (remove-quotes $y True)))
                            (quote (= ($x1 $z) ($y1 $z)))
                        )
                    )
                    ;'any/all X Predicate Y' and ;'any /all X  not Predicate Y'
                    (($x $y $predicate "any" "false")
                        (let* (($p (remove-quotes $predicate True)) ($y1 (remove-quotes $y True)) ($x1 (remove-quotes $x True)))
                            (quote (= ( $p $y1 $z) ($x1 $z)))
                        )
                    )
                    (($x $y $predicate "all" "false")
                        (let* (($p (remove-quotes $predicate True)) ($y1 (remove-quotes $y True)) ($x1 (remove-quotes $x True)))
                            (quote (= ($p $y1 $z) ($x1 $z)))
                        )
                    )
                    (($x $y $predicate "any" "true")
                        (let* (($p (remove-quotes $predicate True)) ($y1 (remove-quotes $y True)) ($x1 (remove-quotes $x True)))
                            (quote (= ($p $y1 $z) (not ($x1 $z))))
                        )
                    )
                    ( ($x $y $predicate "all" "true")
                        (let* (($p (remove-quotes $predicate True)) ($y1 (remove-quotes $y True)) ($x1 (remove-quotes $x True)))
                            (quote (= ($p $y1 $z) (not ($x1 $z))))
                        )
                    )
                    (Empty
                        (case (match $dict_space (, ("type_of" "question") ("subject" $x) ("copula_or_verb" $predicate)
                                ("object_class" $y) ("negation" "false")) ($x $y $predicate))
                            (
                                (($x $y "is")
                                 (let $y1 (remove-quotes $y True)
                                    (quote ($y1 $x))
                                 )
                                )
                                (($x $y "are")
                                 (let $y1 (remove-quotes $y True)
                                    (quote ($y1 $x))
                                 )
                                )
                                (($x $y $predicate)
                                 (let* (($p (remove-quotes $predicate True)) ($y1 (remove-quotes $y True)))
                                    (quote ( $p $y1 $x))
                                 )
                                )
                                (Empty
                                 nothing
                                )
                            )
                        )
                    )
                )
             )
            )
          )
    )
   )
)



